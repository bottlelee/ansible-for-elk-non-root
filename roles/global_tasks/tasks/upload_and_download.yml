---
- name: Check if {{ pkg_src }} exists
  ansible.builtin.stat:
    path: "{{ pkg_src }}"
  register: pkg_src_stat
  delegate_to: localhost
  become: false
  tags:
    - upload
    - download

# - name: Print info of {{ pkg_src }}
#   ansible.builtin.debug:
#     msg: "{{ pkg_src_stat.stat }}"
#   when: pkg_src_stat.stat.exists
#   tags:
#     - upload
#     - download

- name: Tasks for download
  delegate_to: localhost
  become: false
  when: not pkg_src_stat.stat.exists
  tags:
    - download

  block:
    - name: Create local package store path '{{ pkg_src | dirname }}'
      ansible.builtin.file:
        path: "{{ pkg_src | dirname }}"
        state: directory
        mode: "0755"

    - name: NOTICE
      ansible.builtin.debug:
        msg: |
          Starting download package from
            {{ pkg_url }}
          It may take a while
          Please wait...

    - name: Downloading from {{ pkg_url }}
      ansible.builtin.get_url:
        url: "{{ pkg_url }}"
        dest: "{{ pkg_src }}"
        mode: "0644"
        backup: true
      register: download_result
      until: download_result is succeeded
      retries: 3
      delay: 10

    - name: Repeat tasks
      ansible.builtin.include_tasks:
        file: upload_and_download.yml

- name: Tasks for upload
  tags:
    - upload
  block:
    - name: Create remote package path '{{ pkg_dst }}'
      ansible.builtin.file:
        path: "{{ pkg_dst }}"
        state: directory
        mode: "0755"
        owner: "{{ pkg_owner | default(elk_user) }}"
        group: "{{ pkg_group | default(elk_group) }}"

    - name: The package is a compressed archive
      ansible.builtin.set_fact:
        pkg_is_archived: true
      when:
        - pkg_src_stat.stat.mimetype | regex_search("(tar|zip|bzip2|gzip|xz|rar-compressed)$")

    - name: Extracting {{ pkg_src }} to {{ pkg_dst }}
      ansible.builtin.unarchive:
        src: "{{ pkg_src }}"
        dest: "{{ pkg_dst }}"
        creates: "{{ pkg_bin | default('') }}"
        owner: "{{ pkg_owner | default(elk_user) }}"
        group: "{{ pkg_group | default(elk_group) }}"
        extra_opts:
          - --strip-components=1
      when: pkg_is_archived is defined

    - name: Copy {{ pkg_src }} to {{ pkg_dst }}
      ansible.builtin.copy:
        src: "{{ pkg_src }}"
        dest: "{{ pkg_dst }}"
        owner: "{{ pkg_owner | default(elk_user) }}"
        group: "{{ pkg_group | default(elk_group) }}"
        mode: "{{ pkg_mode | default('0444') }}"
        backup: true
      when: pkg_is_archived is not defined
